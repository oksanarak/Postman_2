{
	"info": {
		"_postman_id": "05d69e3c-2881-4d2c-a226-07ab8da8d477",
		"name": "HW 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21353266"
	},
	"item": [
		{
			"name": "First/2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string\r",
							"pm.test(\"The correct type\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3/2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Проверить, что name в ответе равно name с request (name вбить руками)\r",
							"let resp_name = jsonData.name;\r",
							"\r",
							"pm.test(\"The correct name\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Inna\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age с request (age вбить руками)\r",
							"let resp_age = jsonData.age;\r",
							"\r",
							"pm.test(\"The correct age\", function () {\r",
							"    pm.expect(resp_age).to.eql(\"30\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary с request (salary вбить руками)\r",
							"let resp_salary = jsonData.salary;\r",
							"\r",
							"pm.test(\"The correct salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(5000);\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"let req = request.data\r",
							"\r",
							"//Проверить, что name в ответе равно name с request (name забрать из request)\r",
							"let req_name = req.name;\r",
							"\r",
							"pm.test(\"The right name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age с request (age забрать из request)\r",
							"let req_age = req.age;\r",
							"\r",
							"pm.test(\"The right age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary с request (salary забрать из request)\r",
							"let req_salary = req.salary;\r",
							"\r",
							"pm.test(\"The right salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(Number(req_salary));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"let family = jsonData.family\r",
							"\r",
							"console.log(family);\r",
							"\r",
							"//Проверить, что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let req_salary_1_5_year = req_salary * 4;\r",
							"let resp_salary_1_5_year = jsonData.family.u_salary_1_5_year\r",
							"\r",
							"pm.test(\"The right salary in 1_5 year\", function () {\r",
							"    pm.expect(resp_salary_1_5_year).to.eql(req_salary_1_5_year);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Inna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3?=&=&=",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": ""
						},
						{
							"key": "",
							"value": ""
						},
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3/2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name с request (name забрать из request)\r",
							"let req_name = req.name;\r",
							"let resp_name = jsonData.name;\r",
							"\r",
							"pm.test(\"The right name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age с request (age забрать из request)\r",
							"let req_age = req.age;\r",
							"let resp_age = jsonData.age;\r",
							"\r",
							"pm.test(\"The right age\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary с request (salary забрать из request)\r",
							"let req_salary = req.salary;\r",
							"let resp_salary = jsonData.salary;\r",
							"\r",
							"pm.test(\"The right salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(Number(req_salary));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"let super_family = jsonData.family\r",
							"\r",
							"console.log(super_family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"Dog has a name\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"name\");\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Dog has an age\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"age\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"The name of dog is Luky\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"Luky\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"The age of dog is 4\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Olga&age=27&salary=7500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Olga"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "7500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4/2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name с request (name забрать из request)\r",
							"let req_name = req.name;\r",
							"let resp_name = jsonData.name;\r",
							"\r",
							"pm.test(\"The right name\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age с request (age забрать из request)\r",
							"let req_age = req.age;\r",
							"let resp_age = jsonData.age;\r",
							"\r",
							"pm.test(\"The right age\", function () {\r",
							"    pm.expect(resp_age).to.eql(Number(req_age));\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request\r",
							"let salary = req.salary;\r",
							"\r",
							"console.log(salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"let first_number = jsonData.salary;\r",
							"\r",
							"console.log(first_number[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary из response\r",
							"let second_number = jsonData.salary;\r",
							"\r",
							"console.log(second_number[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary из response\r",
							"let third_number = jsonData.salary;\r",
							"\r",
							"console.log(third_number[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"The similar salary\", function () {\r",
							"    pm.expect(first_number[0]).to.eql(Number(salary));\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"let double_salary = salary*2;\r",
							"\r",
							"pm.test(\"The similar salary\", function () {\r",
							"    pm.expect(first_number[1]).to.eql(String(double_salary));\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"let triple_salary = salary*3;\r",
							"\r",
							"pm.test(\"The similar salary\", function () {\r",
							"    pm.expect(first_number[2]).to.eql(String(triple_salary));\r",
							"});\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", req.name);\r",
							"\r",
							"//Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req.age);\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"\r",
							"//Написать цикл, который выведет в консоль по порядку элементы списка из параметра salary\r",
							"let resp_salary = jsonData.salary\r",
							"\r",
							"resp_salary.forEach((item) => {console.log(item)}) //1 способ\r",
							"\r",
							"for (let i = 0; i<jsonData.salary.length; i++) {   //2 способ\r",
							"    console.log(resp_salary[i])\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Kris&age=43&salary=12500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kris"
						},
						{
							"key": "age",
							"value": "43"
						},
						{
							"key": "salary",
							"value": "12500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2/2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в request\r",
							"pm.variables.get(\"salary\");\r",
							"\r",
							"//Вставить параметр age из окружения в request\r",
							"pm.variables.get(\"age\");\r",
							"\r",
							"//Вставить параметр name из окружения в request\r",
							"pm.variables.get(\"name\");\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"let req = request.data\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Stsrt qa salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Qa salary after 6 months\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Qa salary after 12 months\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Qa salary after 1.5 year\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_year\r",
							"pm.test(\"Qa salary after 3.5 year\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_3.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Person\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\r",
							"let req_salary = req.salary;\r",
							"let resp_salary = jsonData.start_qa_salary;\r",
							"\r",
							"pm.test(\"The similar salary\", function () {\r",
							"    pm.expect(resp_salary).to.eql(Number(req_salary));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\r",
							"let req_new_salary = req_salary * 2;\r",
							"let resp_6_months = jsonData.qa_salary_after_6_months;\r",
							"\r",
							"pm.test(\"The similar salary\", function () {\r",
							"    pm.expect(resp_6_months).to.eql(Number(req_new_salary));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\r",
							"let req_new_salary_12 = req_salary * 2.7;\r",
							"let resp_12_months = jsonData.qa_salary_after_12_months;\r",
							"\r",
							"pm.test(\"The similar salary\", function () {\r",
							"    pm.expect(resp_12_months).to.eql(Number(req_new_salary_12));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request)\r",
							"let req_new_salary_18 = req_salary * 3.3;\r",
							"let resp_18_months = jsonData[\"qa_salary_after_1.5_year\"];\r",
							"\r",
							"pm.test(\"The similar salary\", function () {\r",
							"    pm.expect(resp_18_months).to.eql(Number(req_new_salary_18));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request)\r",
							"let req_future_salary = req_salary * 3.8;\r",
							"let resp_future_salary = jsonData[\"qa_salary_after_3.5_years\"];\r",
							"\r",
							"pm.test(\"The similar salary\", function () {\r",
							"    pm.expect(resp_future_salary).to.eql(Number(req_future_salary));\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request)\r",
							"let first_el = jsonData.person.u_name\r",
							"\r",
							"pm.test(\"The salary 12500\", function () {\r",
							"    pm.expect(first_el[1]).to.eql(Number(req_salary));\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_age равен age из request (age забрать из request)\r",
							"let req_u_age = req.age;\r",
							"let resp_u_age = jsonData.person.u_age;\r",
							"\r",
							"pm.test(\"The u_age 43\", function () {\r",
							"    pm.expect(resp_u_age).to.eql(Number(req_u_age));\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request)\r",
							"let req_salary_5_years = req_salary * 4.2;\r",
							"let resp_salary_5_years = jsonData.person[\"u_salary_5_years\"];\r",
							"\r",
							"pm.test(\"The salary in 5 years\", function () {\r",
							"    pm.expect(resp_salary_5_years).to.eql(Number(req_salary_5_years));\r",
							"});\r",
							"\r",
							"//***Написать цикл, который выведет в консоль по порядку элементы списка из параметра person\r",
							"for (let i = 0; i<jsonData.person.length; i++) {\r",
							"    if (i==0) {\r",
							"        console.log(jsonData.person.u_age)\r",
							"    }else if (i==1) {\r",
							"        console.log(jsonData.person.u_name)\r",
							"    }else (console.log(jsonData.person.u_salary_5_years))\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}